'use strict';

const bps_env = require('babel-preset-env').default;
const bps_stage_3 = require('babel-preset-stage-3');
const bpi_offside_js = require('babel-plugin-offside-js');
const bpi_class_props = require('babel-plugin-transform-class-properties');
const bpi_async_gen_fns = require('babel-plugin-transform-async-generator-functions');

module.exports = exports = function preset(context, opts = {}) {
  const opts_stage_3 = 'stage_3' in opts ? opts.stage_3 : !opts.no_stage_3;
  delete opts.stage_3;delete opts.no_stage_3;
  const opts_offside = opts.offside;
  delete opts.offside;

  if (!opts.targets) {
    opts.targets = { node: 'current' };
  }

  if ('current' == opts.targets.node) {
    const major_ver = /^v(\d+)\.\d\d/.exec(process.version);
    if (major_ver) {
      // babel-preset-env has a bug handling two digit Node minor versions.
      opts.targets.node = parseInt(major_ver[1]) + 0.9;
    }
  }

  if (true === opts.targets.browser) {
    opts.targets.browser = 'last 1 versions, > 2% in US';
  }

  let presets = [],
      plugins = [];

  presets.push([bps_env, opts]);
  if (opts_stage_3) {
    presets.push([bps_stage_3]);
  } else {
    // However, generator async * functions should still be supported
    plugins.push([bpi_async_gen_fns]);
  }

  plugins.push([bpi_class_props]);
  plugins.push([bpi_offside_js, opts_offside]);

  return { presets, plugins };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NvZGUvaW5kZXguanMiXSwibmFtZXMiOlsiYnBzX2VudiIsInJlcXVpcmUiLCJkZWZhdWx0IiwiYnBzX3N0YWdlXzMiLCJicGlfb2Zmc2lkZV9qcyIsImJwaV9jbGFzc19wcm9wcyIsImJwaV9hc3luY19nZW5fZm5zIiwibW9kdWxlIiwiZXhwb3J0cyIsInByZXNldCIsImNvbnRleHQiLCJvcHRzIiwib3B0c19zdGFnZV8zIiwic3RhZ2VfMyIsIm5vX3N0YWdlXzMiLCJvcHRzX29mZnNpZGUiLCJvZmZzaWRlIiwidGFyZ2V0cyIsIm5vZGUiLCJtYWpvcl92ZXIiLCJleGVjIiwicHJvY2VzcyIsInZlcnNpb24iLCJwYXJzZUludCIsImJyb3dzZXIiLCJwcmVzZXRzIiwicGx1Z2lucyIsInB1c2giXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsVUFBVUMsUUFBUSxrQkFBUixFQUE0QkMsT0FBNUM7QUFDQSxNQUFNQyxjQUFjRixRQUFRLHNCQUFSLENBQXBCO0FBQ0EsTUFBTUcsaUJBQWlCSCxRQUFRLHlCQUFSLENBQXZCO0FBQ0EsTUFBTUksa0JBQWtCSixRQUFRLHlDQUFSLENBQXhCO0FBQ0EsTUFBTUssb0JBQW9CTCxRQUFRLGtEQUFSLENBQTFCOztBQUVBTSxPQUFPQyxPQUFQLEdBQWlCQSxVQUFVLFNBQVNDLE1BQVQsQ0FBZ0JDLE9BQWhCLEVBQXlCQyxPQUFLLEVBQTlCLEVBQWtDO0FBQzNELFFBQU1DLGVBQWUsYUFBYUQsSUFBYixHQUFvQkEsS0FBS0UsT0FBekIsR0FBbUMsQ0FBQ0YsS0FBS0csVUFBOUQ7QUFDQSxTQUFPSCxLQUFLRSxPQUFaLENBQXFCLE9BQU9GLEtBQUtHLFVBQVo7QUFDckIsUUFBTUMsZUFBZUosS0FBS0ssT0FBMUI7QUFDQSxTQUFPTCxLQUFLSyxPQUFaOztBQUVBLE1BQUcsQ0FBQ0wsS0FBS00sT0FBVCxFQUFtQjtBQUNqQk4sU0FBS00sT0FBTCxHQUFlLEVBQUlDLE1BQU0sU0FBVixFQUFmO0FBQWtDOztBQUVwQyxNQUFHLGFBQWFQLEtBQUtNLE9BQUwsQ0FBYUMsSUFBN0IsRUFBb0M7QUFDbEMsVUFBTUMsWUFBWSxnQkFBZ0JDLElBQWhCLENBQXVCQyxRQUFRQyxPQUEvQixDQUFsQjtBQUNBLFFBQUdILFNBQUgsRUFBZTtBQUNiO0FBQ0FSLFdBQUtNLE9BQUwsQ0FBYUMsSUFBYixHQUFvQkssU0FBU0osVUFBVSxDQUFWLENBQVQsSUFBeUIsR0FBN0M7QUFBZ0Q7QUFBQTs7QUFFcEQsTUFBRyxTQUFTUixLQUFLTSxPQUFMLENBQWFPLE9BQXpCLEVBQW1DO0FBQ2pDYixTQUFLTSxPQUFMLENBQWFPLE9BQWIsR0FBdUIsNkJBQXZCO0FBQW9EOztBQUV0RCxNQUFJQyxVQUFVLEVBQWQ7QUFBQSxNQUFrQkMsVUFBVSxFQUE1Qjs7QUFFQUQsVUFBUUUsSUFBUixDQUFlLENBQUUzQixPQUFGLEVBQVdXLElBQVgsQ0FBZjtBQUNBLE1BQUdDLFlBQUgsRUFBa0I7QUFDaEJhLFlBQVFFLElBQVIsQ0FBZSxDQUFFeEIsV0FBRixDQUFmO0FBQThCLEdBRGhDLE1BRUs7QUFDSDtBQUNBdUIsWUFBUUMsSUFBUixDQUFlLENBQUVyQixpQkFBRixDQUFmO0FBQW9DOztBQUV0Q29CLFVBQVFDLElBQVIsQ0FBZSxDQUFFdEIsZUFBRixDQUFmO0FBQ0FxQixVQUFRQyxJQUFSLENBQWUsQ0FBRXZCLGNBQUYsRUFBa0JXLFlBQWxCLENBQWY7O0FBRUEsU0FBTyxFQUFJVSxPQUFKLEVBQWFDLE9BQWIsRUFBUDtBQUEyQixDQTlCN0IiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBicHNfZW52ID0gcmVxdWlyZSgnYmFiZWwtcHJlc2V0LWVudicpLmRlZmF1bHRcbmNvbnN0IGJwc19zdGFnZV8zID0gcmVxdWlyZSgnYmFiZWwtcHJlc2V0LXN0YWdlLTMnKVxuY29uc3QgYnBpX29mZnNpZGVfanMgPSByZXF1aXJlKCdiYWJlbC1wbHVnaW4tb2Zmc2lkZS1qcycpXG5jb25zdCBicGlfY2xhc3NfcHJvcHMgPSByZXF1aXJlKCdiYWJlbC1wbHVnaW4tdHJhbnNmb3JtLWNsYXNzLXByb3BlcnRpZXMnKVxuY29uc3QgYnBpX2FzeW5jX2dlbl9mbnMgPSByZXF1aXJlKCdiYWJlbC1wbHVnaW4tdHJhbnNmb3JtLWFzeW5jLWdlbmVyYXRvci1mdW5jdGlvbnMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmdW5jdGlvbiBwcmVzZXQoY29udGV4dCwgb3B0cz17fSkgOjpcbiAgY29uc3Qgb3B0c19zdGFnZV8zID0gJ3N0YWdlXzMnIGluIG9wdHMgPyBvcHRzLnN0YWdlXzMgOiAhb3B0cy5ub19zdGFnZV8zXG4gIGRlbGV0ZSBvcHRzLnN0YWdlXzM7IGRlbGV0ZSBvcHRzLm5vX3N0YWdlXzM7IFxuICBjb25zdCBvcHRzX29mZnNpZGUgPSBvcHRzLm9mZnNpZGVcbiAgZGVsZXRlIG9wdHMub2Zmc2lkZVxuXG4gIGlmICFvcHRzLnRhcmdldHMgOjpcbiAgICBvcHRzLnRhcmdldHMgPSBAe30gbm9kZTogJ2N1cnJlbnQnXG5cbiAgaWYgJ2N1cnJlbnQnID09IG9wdHMudGFyZ2V0cy5ub2RlIDo6XG4gICAgY29uc3QgbWFqb3JfdmVyID0gL152KFxcZCspXFwuXFxkXFxkLy5leGVjIEAgcHJvY2Vzcy52ZXJzaW9uXG4gICAgaWYgbWFqb3JfdmVyIDo6XG4gICAgICAvLyBiYWJlbC1wcmVzZXQtZW52IGhhcyBhIGJ1ZyBoYW5kbGluZyB0d28gZGlnaXQgTm9kZSBtaW5vciB2ZXJzaW9ucy5cbiAgICAgIG9wdHMudGFyZ2V0cy5ub2RlID0gcGFyc2VJbnQobWFqb3JfdmVyWzFdKSArIDAuOVxuXG4gIGlmIHRydWUgPT09IG9wdHMudGFyZ2V0cy5icm93c2VyIDo6XG4gICAgb3B0cy50YXJnZXRzLmJyb3dzZXIgPSAnbGFzdCAxIHZlcnNpb25zLCA+IDIlIGluIFVTJ1xuXG4gIGxldCBwcmVzZXRzID0gW10sIHBsdWdpbnMgPSBbXVxuXG4gIHByZXNldHMucHVzaCBAIFsgYnBzX2Vudiwgb3B0cyBdXG4gIGlmIG9wdHNfc3RhZ2VfMyA6OlxuICAgIHByZXNldHMucHVzaCBAIFsgYnBzX3N0YWdlXzMgXVxuICBlbHNlIDo6XG4gICAgLy8gSG93ZXZlciwgZ2VuZXJhdG9yIGFzeW5jICogZnVuY3Rpb25zIHNob3VsZCBzdGlsbCBiZSBzdXBwb3J0ZWRcbiAgICBwbHVnaW5zLnB1c2ggQCBbIGJwaV9hc3luY19nZW5fZm5zIF1cblxuICBwbHVnaW5zLnB1c2ggQCBbIGJwaV9jbGFzc19wcm9wcyBdXG4gIHBsdWdpbnMucHVzaCBAIFsgYnBpX29mZnNpZGVfanMsIG9wdHNfb2Zmc2lkZSBdXG5cbiAgcmV0dXJuIEB7fSBwcmVzZXRzLCBwbHVnaW5zXG5cbiJdfQ==